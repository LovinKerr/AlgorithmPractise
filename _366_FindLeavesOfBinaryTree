class _366_FindLeavesOfBinaryTree {
    //1.（找到断点）先找到每一列最右边的node 放set， 走到这个数，就停止
    //2.从下往上走，要么左右为null，要么在set中
    public List<List<Integer>> findLeaves(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<>();
        HashSet<TreeNode> visited = new HashSet<>();
        // HashSet<TreeNode> rightNode = new HashSet<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()) {
            TreeNode curr = q.peek();
            if(curr.left != null) {
                q.offer(curr.left);
            } 
            if(curr.right != null) {
                q.offer(curr.right);
            }
            if(curr.left == null && curr.right == null) {
                q.
            }
        }
        
        
        
    }
    
    private List<Integer> helper(HashSet<TreeNode> visited, TreeNode node) {
        if(node.left == null && node.right == null || visited.contains(node.left) && visited.contains(node.right)) {
            
        }
    }

}